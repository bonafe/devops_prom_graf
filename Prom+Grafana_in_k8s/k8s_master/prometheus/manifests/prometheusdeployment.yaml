
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    configmap.reloader.stakater.com/reload: "prometheus-configmap,prometheus-configmap-alerts"
    kompose.cmd: /snap/kompose/19/kompose-linux-amd64 -v convert
    kompose.version: 1.21.0 (992df58d8)
  name: prometheus
  labels:
    allow.http: "false"
    application: prometheus
spec:
  replicas: 2
  selector:
    matchLabels:
      application: prometheus
  template:
    metadata:
      labels:
        application: prometheus
    spec:
      containers:
      - args:
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/prometheus
        - --web.console.libraries=/usr/share/prometheus/console_libraries
        - --web.console.templates=/usr/share/prometheus/consoles
        image: prom/prometheus:v2.2.1
        name: prometheus
        volumeMounts:
        - mountPath: /etc/prometheus
          name: prometheus-configmap-volume
        - mountPath: /prometheus
          name: prometheus-data
        - mountPath: /etc/config
          name: prometheus-configmap-volume-alerts
      restartPolicy: Always
      volumes:
      - name: prometheus-configmap-volume
        configMap:
          name: prometheus-configmap
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-data
      - name: prometheus-configmap-volume-alerts
        configMap:
          name: prometheus-configmap-alerts


---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  type: ClusterIP
  ports:
  - port: 80 # Porta a ser exposta pelo SERVICE
    targetPort: 9090 # Porta que a aplicação está rodando no POD
  selector:
    application: prometheus


---
kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  name: prometheus
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.tls.certresolver: default
spec:
  rules:
    - host: prometheus.rancher.devopsgiz33.cf
      http:
        paths:
          - backend:
              serviceName: prometheus
              servicePort: 80

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1beta1
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: default


