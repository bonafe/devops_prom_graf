apiVersion: v1
kind: ConfigMap
metadata:
  name: sql-exporter-configmap
  labels:
    app: sql-exporter
data:
  sql_exporter.yml: |
    global:
      # Subtracted from Prometheus' scrape_timeout to give us some headroom and prevent Prometheus from
      # timing out first.
      scrape_timeout_offset: 500ms
      # Minimum interval between collector runs: by default (0s) collectors are executed on every scrape.
      min_interval: 0s
      # Maximum number of open connections to any one target. Metric queries will run concurrently on
      # multiple connections.
      max_connections: 3
      # Maximum number of idle connections to any one target.
      max_idle_connections: 3

    # The target to monitor and the list of collectors to execute on it.
    target:
      # Data source name always has a URI schema that matches the driver name. In some cases (e.g. MySQL)
      # the schema gets dropped or replaced to match the driver expected DSN format.
      data_source_name: 'go_ibm_db://HOSTNAME=sccd.icarotech.com;DATABASE=maxdb71;PORT=50005;UID=icaro;PWD=1Ct@dashboard##'

      # Collectors (referenced by name) to execute on the target.
      collectors: [tickets]

    # Collector definition files.
    collector_files:
      - "*.collector.yml"

  tickets.collector.yml: |
    # This collector will be referenced in the exporter configuration as `pricing_data_freshness`.
    collector_name: tickets

    # A Prometheus metric with (optional) additional labels, value and labels populated from one query.
    metrics:
      - metric_name: ticket_amount_2016
        type: gauge
        help: 'Amount of tickets in 2016'
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and reportdate >=  '2016-01-01 00:00:00.000'  and reportdate <=  '2016-12-31 23:59:59.000' )

      - metric_name: ticket_amount_2017
        type: gauge
        help: 'Amount of tickets in 2017'
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and reportdate >=  '2017-01-01 00:00:00.000'  and reportdate <=  '2017-12-31 23:59:59.000' )

      - metric_name: ticket_amount_2018
        type: gauge
        help: 'Amount of tickets in 2018'
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and reportdate >=  '2018-01-01 00:00:00.000'  and reportdate <=  '2018-12-31 23:59:59.000' )

      - metric_name: ticket_amount_2019
        type: gauge
        help: 'Amount of tickets in 2019'
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and reportdate >=  '2019-01-01 00:00:00.000'  and reportdate <=  '2019-12-31 23:59:59.000' )

      - metric_name: ticket_amount_2020
        type: gauge
        help: 'Amount of tickets in 2020'
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and reportdate >=  '2020-01-01 00:00:00.000'  and reportdate <=  '2020-12-31 23:59:59.000' )

      - metric_name: ticket_amount_2021
        type: gauge
        help: 'Amount of tickets in 2021'
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and reportdate >=  '2021-01-01 00:00:00.000'  and reportdate <=  '2021-12-31 23:59:59.000' )

      - metric_name: new_tickets
        type: gauge
        help: "New tickets"
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and status = 'NEW')

      - metric_name: open_tickets
        type: gauge
        help: "Open tickets"
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and status != 'NEW' and status != 'CLOSED' and status != 'CANCELED')

      - metric_name: solved_tickets
        type: gauge
        help: "Solved tickets"
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and status = 'RESOLVED')

      - metric_name: problem_tickets
        type: gauge
        help: "Problem tickets"
        values: [1]
        query: |
          select count(ticketid) from maximo.PROBLEM where (siteid = 'TI' and status != 'CLOSED' and status != 'CANCELED')

      - metric_name: incident_tickets
        type: gauge
        help: "Incident tickets"
        values: [1]
        query: |
          select count(ticketid) from maximo.INCIDENT where (siteid = 'TI' and status != 'CLOSED' and status != 'CANCELED')

      - metric_name: backlog_tickets
        type: gauge
        help: "Backlog tickets"
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and status != 'CLOSED' and status != 'CANCELED' and REQUESTTYPE = 'BACKLOG')

      - metric_name: ElisanSouza_tickets
        type: gauge
        help: "ElisanSouza tickets"
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and owner = 'ELISANSOUZA' and status != 'CLOSED' and status != 'CANCELED')

      - metric_name: FelipeAscensio_tickets
        type: gauge
        help: "FelipeAscencio tickets"
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and owner = 'FELIPEASCENSIO' and status != 'CLOSED' and status != 'CANCELED')

      - metric_name: GabrielViegas_tickets
        type: gauge
        help: "GabrielViegas tickets"
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and owner = 'GABRIELVIEGAS' and status != 'CLOSED' and status != 'CANCELED')

      - metric_name: JonasDeusdara_tickets
        type: gauge
        help: "JonasDeusdara tickets"
        values: [1]
        query: |
          select count(ticketid) from maximo.SR where (siteid = 'TI' and owner = 'JONASDEUSDARA' and status != 'CLOSED' and status != 'CANCELED')

      - metric_name: AnoDinamico_tickets
        type: gauge
        help: "AnoDinamico tickets"
        value_label: 'years'
        values: [COUNT,REPORTDATE]
        query: |
          SELECT
          COUNT(ticketid) AS count, YEAR(REPORTDATE) AS reportdate from maximo.SR
          WHERE
          (siteid = 'TI' and reportdate >= '2016-01-01 00:00:00') 
          GROUP BY YEAR(REPORTDATE)     
